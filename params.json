{"name":"Small Steps of Main to BIG","tagline":"Serde for Cobol Layout to Hive table","body":"### Cobol-to-Hive Serde\r\n\r\nCobol-to-Hive serde requires\r\n1. Mainframe files to be in their raw format (Transfer the file as binary)\r\n1. Cobol layout needs to be provided\r\n\r\n### DDL for using this serde\r\n\r\n#### Purpose\r\nSimple hive create table will suffice for using the serde. Column names will be created automatically using the cobol layout provided.\r\nMainfame file format FB or VB needs to specified in DDL using input format.\r\nFor FB file use `INPUTFORMAT 'org.apache.hadoop.mapred.FixedLengthInputFormat'` also FB length needs to specified using 'fb.length' property in TBLPROPERTIES\r\nFor VB file use` INPUTFORMAT 'com.savy3.mapred.MainframeVBInputFormat'`\r\n\r\n#### Example\r\n\r\nFB file - \r\n     CREATE TABLE Cobol2Hive\r\n     ROW FORMAT SERDE 'com.savy3.cobolserde.CobolSerde' \r\n     STORED AS\r\n     INPUTFORMAT 'org.apache.hadoop.mapred.FixedLengthInputFormat'\r\n     OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat'\r\n     LOCATION '/home/hduser/hive/warehouse/ram.db/lolol'\r\n     TBLPROPERTIES ('cobol.layout.url'='/namenode/user/ram/cobol_layout/maincobol.copybook',\r\n                           'fb.length'='450');\r\nVB file - \r\n     CREATE TABLE Cobol2Hive\r\n     ROW FORMAT SERDE 'com.savy3.cobolserde.CobolSerde' \r\n     STORED AS\r\n     INPUTFORMAT 'com.savy3.mapred.MainframeVBInputFormat'\r\n     OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat'\r\n     LOCATION '/home/hduser/hive/warehouse/ram.db/lolol'\r\n     TBLPROPERTIES ('cobol.layout.url'='/namenode/user/ram/cobol_layout/maincobol.copybook');\r\n\r\n### How to provide Cobol layout/copybook\r\n\r\nCurrent version supports 2 options\r\ncobol.layout.url -- for which cobol layout/copybook needs to be in hdfs and location needs to provided for this option\r\nExample: TBLPROPERTIES ('cobol.layout.url'='/namenode/user/ram/cobol_layout/maincobol.copybook');\r\n\r\ncobol.layout.literal -- for which cobol layout needs to be typed in DDL statement. there is limit of 100 characters\r\nExample : TBLPROPERTIES ('cobol.layout'='01 WS-VAR. 05 WS-NAME PIC X(12). 05 WS-MARKS-LENGTH PIC 9(2). 05 WS-marks OCCURS 0 to 6 TIMES DEPENDING \r\nON WS-MARKS-LENGTH. 10 WS-MARK PIC 999. 05 WS-NICKNAME PIC X(6)');\r\n\r\n\r\n### How cobol copy book is intrepreted?\r\n\r\n#### Identifying the cobol fields\r\nSince cobol fileds in layout can span across multiple rows, input layout is split with character combination \". \" to get each field description.\r\n\r\n#### Unsuported characters in field names\r\nCobol field name consists of \"-\" which are not supported in hive, we convert them to \"_\" in hive column names.\r\nFor example: WS-NAME will be converted as WS_NAME in hive.\r\n\r\n#### Duplicate field names\r\nCobol field are preceeded  with a level number. Every field with level number will be converted to corresponding column.\r\nDuplicate names are possible in cobol layout, in such scenarios serde will create a new column name by suffixing with number.\r\nFor example: \"... 05 FILLER X(10). 05 FILLER X(20). \" will be converted as FILLER and FILLER_1 columns in hive\r\n\r\n#### Redefines clause \r\nCobol layout contains redefines clause which is similar to union clause. For simplicity purposes we will create seperate columns.\r\nFor example: \" 05 WS-RED  PIC X(4). \r\n               05 WS-VAR REDEFINES WS-RED.\r\n                  10 WS-VAR1 PIC X(2).\r\n                  10 WS-VAR2 PIC X(2). \"\r\nwill be converted to WS_RED  string, \r\n                     WS_VAR1 string, \r\n                     WS_VAR2 string                    \r\nIf the value of this field is \"CHAR\" then table will have data as below:\r\nWS_RED\tWS_VAR1\tWS_VAR2\r\nCHAR    CH      AR\r\n\r\n#### OCCURS clause\r\nCobol layout contains occurs clause which is similar to arrays. For simplicity purposes each instance is converted to seperate column based on the number of instances.\r\nFor example: \" 05 WS-marks OCCURS 0 to 6 TIMES DEPENDING ON WS-MARKS-LENGTH. \r\n                  10 WS-MARK PIC 999. \r\n               05 WS-NICKNAME PIC X(6).\"\r\nwill be converted to \r\n                 WS_MARK     int, \r\n                 WS_MARK1    int,\r\n                 WS_MARK2    int,\r\n                 WS_MARK3    int,\r\n                 WS_MARK4    int,\r\n                 WS_MARK5    int,\r\n                 WS_NICKNAME string           \r\n\r\n### Field Type Conversions\r\n\r\nCobol Picture clause definitions are used to determine their corresponding data-types in hive.\r\nBelow is mapping where n and m are any numbers\r\nMainframe\t\t\t\t\t\t\t\tHive\r\nPIC X(n) \t\t\t\t\t\t\t\tString\r\nPIC A(n)\t\t\t\t\t\t\t\tString\r\nPIC 9(n)    \t\t\t\t\t\ttinyint \tif n <3 \r\n \t\t\t\t\t\t\t\t\t\t\t\tsmallint\tif n <5\r\n \t\t\t\t\t\t\t\t\t\t\t\tint   \t\tif n <10\r\n \t\t\t\t\t\t\t\t\t\t\t\tbigint\t\tif n <19\r\n \t\t\t\t\t\t\t\t\t\t\t\tstring\t\tif n >=19\r\nPIC 9(m)V9(n)\t\t\t\t\t\tDECIMAL(m,n)\r\nPIC 9(n) COMP-3   \t\t\ttinyint \tif n <3 \r\n \t\t\t\t\t\t\t\t\t\t\t\tsmallint\tif n <5\r\n \t\t\t\t\t\t\t\t\t\t\t\tint   \t\tif n <10\r\n \t\t\t\t\t\t\t\t\t\t\t\tbigint\t\tif n <19\r\n \t\t\t\t\t\t\t\t\t\t\t\tstring\t\tif n >=19\r\nPIC 9(m)V9(n) COMP-3\t\tDECIMAL(m,n)\r\n   \r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}